{"version":3,"sources":["components/SingleCard.js","App.js","index.js"],"names":["SingleCard","card","handleChoice","flipped","className","src","alt","name","onClick","cardImages","matched","App","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","useEffect","previousCards","map","resetTurn","setTimeout","previousTurns","shuffledCards","sort","Math","random","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAwBeA,EAtBI,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,QAMrC,OACI,qBAAKC,UAAY,OAAjB,SACI,sBAAKA,UAAaD,EAAU,UAAU,GAAtC,UACI,qBAAKC,UAAU,QAAQC,IAAKJ,EAAKI,IAAKC,IAAKL,EAAKM,OAChD,qBACIH,UAAY,OACZC,IAAI,iBACJC,IAAI,YACJE,QAZI,WAChBN,EAAaD,YCDfQ,EAAa,CACjB,CAAE,IAAO,cAAe,KAAQ,oBAAqBC,SAAS,GAC9D,CAAE,IAAO,sBAAuB,KAAO,iBAAkBA,SAAS,GAClE,CAAE,IAAO,iBAAkB,KAAO,QAASA,SAAS,GACpD,CAAE,IAAO,iBAAkB,KAAO,YAAaA,SAAS,GACxD,CAAE,IAAO,sBAAuB,KAAO,cAAeA,SAAS,GAC/D,CAAE,IAAO,gBAAiB,KAAO,OAAQA,SAAS,IA+ErCC,MA5Ef,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGaF,mBAAS,GAHtB,mBAGNG,EAHM,KAGCC,EAHD,OAIoBJ,mBAAS,MAJ7B,mBAINK,EAJM,KAIIC,EAJJ,OAKoBN,mBAAS,MAL7B,mBAKNO,EALM,KAKIC,EALJ,KAkBPlB,EAAe,SAACD,GACpBgB,EAAYG,EAAanB,GAAQiB,EAAajB,IAKhDoB,qBAAU,WACLJ,GAAaE,IAEXF,EAAUV,OAASY,EAAUZ,MAC9BO,GAAS,SAAAQ,GACP,OAAOA,EAAcC,KAAI,SAAAtB,GACvB,OAAGA,EAAKM,OAASY,EAAUZ,KACzB,2BAAUN,GAAV,IAAgBS,SAAS,IAElBT,QAIbuB,KAEAC,YAAW,kBAAKD,MAAY,QAIhC,CAACP,EAAUE,IAOb,IAAMK,EAAY,WAChBN,EAAa,MACbE,EAAa,MACbJ,GAAS,SAAAU,GAAa,OAAIA,EAAe,MAG3C,OACE,sBAAKtB,UAAU,MAAf,UACI,6CACA,wBAAQI,QAnDO,WACnB,IAAMmB,EAAgB,UAAIlB,EAAcA,GACrCmB,MAAK,kBAAIC,KAAKC,SAAW,MACzBP,KAAI,SAACtB,GAAD,mBAAC,eAAaA,GAAd,IAAoB8B,GAAIF,KAAKC,cAEpChB,EAASa,GACTX,EAAS,IA6CL,sBACA,qBAAKZ,UAAU,YAAf,SACKS,EAAMU,KAAI,SAACtB,GAAD,OACT,cAAC,EAAD,CAEEA,KAAQA,EACRC,aAAgBA,EAChBC,QAASF,IAASkB,GAAalB,IAASgB,GAAahB,EAAKS,SAHnDT,EAAK8B,SAOpB,uBACA,8BAAK,6CAAe,4BAAIhB,aC/EhCiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c995ed7b.chunk.js","sourcesContent":["import \"./SingleCard.css\"\r\n\r\nconst SingleCard = ({card, handleChoice, flipped}) => {\r\n\r\n    const handleClick = ()=>{\r\n        handleChoice(card)\r\n    }\r\n\r\n    return (  \r\n        <div className = \"card\">\r\n            <div className = {flipped ? \"flipped\":\"\"}>\r\n                <img className=\"front\" src={card.src} alt={card.name} />\r\n                <img \r\n                    className = \"back\" \r\n                    src=\"/img/cover.jpg\" \r\n                    alt=\"card back\"\r\n                    onClick = {handleClick} \r\n                />\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default SingleCard;","import { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport SingleCard from './components/SingleCard';\r\n\r\nconst cardImages = [\r\n  { \"src\": \"/img/g2.jpg\", \"name\": \"luffy gear second\", matched: false},\r\n  { \"src\": \"/img/luffylucci.png\", \"name\":\"luffy vs lucci\", matched: false},\r\n  { \"src\": \"/img/sanji.png\", \"name\":\"sanji\", matched: false},\r\n  { \"src\": \"/img/usopp.jpg\", \"name\":\"soge king\", matched: false},\r\n  { \"src\": \"/img/youngluffy.jpg\", \"name\":\"young luffy\", matched: false},\r\n  { \"src\": \"/img/zoro.jpg\", \"name\":\"zoro\", matched: false}\r\n]\r\n\r\nfunction App() {\r\n\r\n  const [cards, setCards] = useState([])\r\n  const [turns, setTurns] = useState(0)\r\n  const [choiceOne,setChoiceOne] = useState(null)\r\n  const [choiceTwo,setChoiceTwo] = useState(null)\r\n\r\n  //shuffle cards\r\n  const shuffleCards = ()=> {\r\n    const shuffledCards = [...cardImages,...cardImages]\r\n      .sort(()=>Math.random() - 0.5)\r\n      .map((card)=> ({...card, id: Math.random() }))\r\n\r\n    setCards(shuffledCards)\r\n    setTurns(0)\r\n  }\r\n\r\n  //handle choice\r\n  const handleChoice = (card)=>{\r\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\r\n    \r\n  }\r\n\r\n  //compare 2 selected cards\r\n  useEffect(()=>{\r\n    if(choiceOne && choiceTwo){\r\n\r\n      if(choiceOne.name === choiceTwo.name){\r\n        setCards(previousCards => {\r\n          return previousCards.map(card => {\r\n            if(card.name === choiceTwo.name){\r\n              return{...card, matched: true}\r\n            }else{\r\n              return card\r\n            }\r\n          })\r\n        })\r\n        resetTurn()\r\n      }else{\r\n        setTimeout(()=> resetTurn(),1000)\r\n      }\r\n    \r\n    }\r\n  },[choiceOne,choiceTwo])\r\n\r\n\r\n \r\n\r\n\r\n  //reset choices and increase turn by 1\r\n  const resetTurn = ()=>{\r\n    setChoiceOne(null);\r\n    setChoiceTwo(null)\r\n    setTurns(previousTurns => previousTurns +1)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <h1>Memory Game</h1>\r\n        <button onClick = {shuffleCards}>New Game</button>\r\n        <div className=\"card-grid\">\r\n            {cards.map((card) => (\r\n              <SingleCard \r\n                key = {card.id} \r\n                card = {card}\r\n                handleChoice = {handleChoice}\r\n                flipped={card === choiceTwo || card === choiceOne || card.matched}\r\n              />\r\n            ))}\r\n        </div>\r\n        <br />\r\n        <div><strong>Turns: <i>{turns}</i></strong></div>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}